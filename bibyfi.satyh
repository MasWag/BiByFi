%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Original author: T. Suwa (github: gfngfn)                 %
% Original repository: https://github.com/gfngfn/cs-thesis      %
%                                                               %
%              Author: Nakano Masaki<namachan10777@gmail.com>   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@require: vdecoset

type bibyfi-article =
  (|
    author       : inline-text list;
    title        : inline-text;
    journal      : inline-text;
    year         : int;
    % option
    volume       : int option;
    number       : inline-text option;
    pages        : (int * int);
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-book = 
  (|
    author       : inline-text list;
    title        : inline-text;
    publisher    : inline-text;
    year         : int;
    % option
    volume       : int option;
    series       : inline-text option;
    address      : inline-text option;
    edition      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-booklet = 
  (|
    title        : inline-text;
    % option
    author       : (inline-text list) option;
    howpublished : inline-text option;
    address      : inline-text option;
    year         : int option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-incollection = 
  (|
    author       : inline-text list;
    title        : inline-text;
    booktitle    : inline-text;
    year         : int;
    % option
    editor       : (inline-text list) option;
    pages        : (int * int);
    organization : inline-text option;
    publisher    : inline-text option;
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-inproceedings = 
  (|
    author       : inline-text list;
    title        : inline-text;
    booktitle    : inline-text;
    year         : int;
    % option
    editor       : (inline-text list) option;
    pages        : (int * int);
    organization : inline-text option;
    publisher    : inline-text option;
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-proceedings = 
  (|
    title        : inline-text;
    year         : int;
    % option
    editor       : (inline-text list) option;
    publisher    : inline-text option;
    organization : inline-text option;
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-manual = 
  (|
    title        : inline-text;
    % option
    author       : (inline-text list) option;
    organization : inline-text option;
    address      : inline-text option;
    edition      : inline-text option;
    month        : inline-text option;
    year         : int option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-masterthesis = 
  (|
    author       : inline-text list;
    title        : inline-text;
    school       : inline-text;
    year         : int;
    % option
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-phdthesis = 
  (|
    author       : inline-text list;
    title        : inline-text;
    school       : inline-text;
    year         : int;
    % option
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-techreport = 
  (|
    author       : inline-text list;
    title        : inline-text;
    institution  : inline-text;
    year         : int;
    % option
    typeof       : inline-text option;
    number       : int option;
    address      : inline-text option;
    month        : inline-text option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-misc = 
  (|
    % option
    author       : (inline-text list) option;
    title        : inline-text option;
    howpublished : inline-text option;
    month        : inline-text option;
    year         : int option;
    note         : inline-text option;
    key          : inline-text option;
  |)

type bibyfi-unpublished = 
  (|
    % option
    author       : inline-text list;
    title        : inline-text;
    note         : inline-text;
    %option
    month        : inline-text option;
    year         : int option;
    key          : inline-text option;
  |)



type bibyfi-item =
  | Article of bibyfi-article
  | Book of bibyfi-book
  | Booklet of bibyfi-booklet
  | InCollection of bibyfi-incollection
  | InProceedings of bibyfi-inproceedings
  | Manual of bibyfi-manual
  | MasterThesis of bibyfi-masterthesis
  | PhDThesis of bibyfi-phdthesis
  | Misc of bibyfi-misc
  | Proceedings of bibyfi-proceedings
  | TechReport of bibyfi-techreport
  | Unpublished of bibyfi-unpublished

module BiByFi: sig
  direct \cite : [string list] inline-cmd
  direct +makebibliography : [context -> bibyfi-item -> inline-boxes; (string * bibyfi-item) list] block-cmd
  direct \BiByFi : [] inline-cmd
end = struct
  let-inline ctx \BiByFi = read-inline ctx {}

  let bib-left-padding = 20pt

  let-mutable cite-logs <- []

  let-inline ctx \cite labels =
    let sacc =
      labels |> List.fold-left-adjacent (fun sacc label _ opt -> (
        let () = cite-logs <- (
          if List.fold-left (fun acc cited -> (string-same cited label) || acc) false !cite-logs
          then !cite-logs
          else label :: !cite-logs
        )
        in
        let s-num =
          match get-cross-reference (`__bibyfi:` ^ label) with
          | None -> `?`
          | Some(l) -> l
        in
          match opt with
          | None -> sacc ^ s-num
          | Some(_) -> sacc ^ s-num ^ `, `#
        )) ` `
      in
        inline-skip 2pt ++ read-inline ctx (embed-string (`[` ^ sacc ^ `]`))

  let-rec sort-same f src refs =
    let pick label lst = lst |> List.filter (fun l -> f l label) |> List.nth 0 in
    match refs with
    | [] -> []
    | label1 :: tl -> (match pick label1 src with
      | Some (l) -> l :: sort-same f src tl
      | None -> sort-same f src tl)

  let bib-entry ctx cite-num ib-main =
    let ib-num = read-inline ctx (embed-string (`[` ^ arabic cite-num ^ `] `#)) in
    let ib =
      inline-skip (0pt -' get-natural-width ib-num)
        ++ ib-num ++ ib-main ++ inline-fil
    in
    let pads = (bib-left-padding, 0pt, 0pt, 0pt) in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> line-break true true ctx ib)

  let-block ctx +makebibliography theme bibs =
      let bibs =
        sort-same (fun (cited, _) label -> string-same label cited) bibs !cite-logs
        |> List.reverse
      in
      let () =
        bibs |> List.iteri (fun i (label, _) -> (
          register-cross-reference (`__bibyfi:` ^ label) (arabic (i + 1))
        ))
      in
        bibs |> List.fold-lefti (fun i bbacc (_, bibitem) -> (
          bbacc +++ bib-entry ctx (i + 1) (theme ctx bibitem)
        )) block-nil
end
